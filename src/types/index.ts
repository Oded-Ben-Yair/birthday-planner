// src/types/index.ts

// --- User Input ---
// Defines the structure of data collected from the user form
export interface UserInput {
	// Added: Name of the person the party is for
	birthdayPersonName: string;

	age: number; // Age the person is turning
	theme: string; // Theme of the party

	// Changed: Specific guest counts
	guestCountAdults: number;
	guestCountChildren: number;

	// Changed: Precise budget and currency
	budgetAmount: number;
	currency: 'NIS' | 'USD' | 'EUR' | string; // Allow common currencies + string for others

	// Location details
	location: {
		city: string;
		setting: 'indoor' | 'outdoor' | 'both';
	};

	// Preferences
	activities: string[]; // Array of preferred activity types

	// Added: Specific food/drink wishes
	foodPreferences: string;
	drinkPreferences: string;

	additionalPreferences?: string; // Optional field for other notes
}


// --- AI Generated Plan Structure ---
// Defines the detailed structure of a single birthday plan generated by the AI

// Represents venue details
export interface Venue {
	name: string;
	description: string;
	costRange: string; // AI provides descriptive range (e.g., "1000-1500 NIS", "$$$")
	amenities: string[]; // List of available amenities
	suitability: string; // Description of why it's suitable
	// Added: Example search terms for finding similar vendors/venues
	venueSearchSuggestions?: string[]; // Optional array of search strings
}

// Represents a single item in the party schedule
export interface ScheduleItem {
	time: string; // e.g., "2:00 PM - 2:30 PM"
	activity: string; // Name of the activity
	description?: string; // Optional details about the activity
}

// Represents the menu structure within catering suggestions
export interface CateringMenu {
	appetizers: string[];
	mainCourses: string[];
	desserts: string; // Single string description (e.g., "Themed Birthday Cake, Fruit Platter")
	beverages: string[];
}

// Represents catering details
export interface Catering {
	estimatedCost: string; // AI provides descriptive cost (e.g., "Approx. 800 NIS", "$$")
	servingStyle: string; // e.g., "Buffet", "Sit-down", "Food stations"
	menu: CateringMenu;
	// Added: Example search terms for finding similar vendors
	cateringSearchSuggestions?: string[]; // Optional array of search strings
}

// Represents guest engagement ideas
export interface GuestEngagement {
	icebreakers: string[];
	interactiveElements: string[];
	photoOpportunities: string[];
	partyFavors: string[];
	techIntegration?: string[]; // Optional array for tech ideas
    // Added: Example search terms for finding relevant vendors (e.g., entertainers)
    entertainmentSearchSuggestions?: string[]; // Optional array of search strings
}

// Represents a complete birthday plan
export interface BirthdayPlan {
	id: string; // Unique ID for the plan (e.g., "plan-1")
	name: string; // Name of the plan (e.g., "DIY Delight Party")
	description: string; // Brief description of the plan
	// Added: Profile to track the distinction (as requested in prompts)
	profile: 'DIY/Budget' | 'Premium/Convenience' | 'Unique/Adventure' | string;
	venue: Venue;
	schedule: ScheduleItem[]; // Array of schedule items
	catering: Catering;
	guestEngagement: GuestEngagement;
}

// --- API Payloads / Responses ---
// Defines structures for communication with the backend Netlify function

// Payload sent TO the backend FOR generating plans
export interface GeneratePlansPayload {
	action: 'generatePlans';
	userInput: UserInput; // Contains all the collected user data
}
// Response expected FROM the backend AFTER generating plans
export interface GeneratePlansResponse {
    plans: BirthdayPlan[]; // Expects an array of plans
}


// Payload sent TO the backend FOR generating invitations
export interface GenerateInvitationPayload {
    action: 'generateInvitation';
    plan: BirthdayPlan; // Send the selected (potentially edited) plan
    template: 'classic' | 'playful' | 'themed' | 'minimalist' | string;
    date: string; // Event date
    time: string; // Event time
}
// Response expected FROM the backend AFTER generating invitation components
export interface SmartInvitation {
	text: string; // Generated invitation text
	imageUrl: string; // URL for the AI-generated image
	template: string; // The template style used
}


// Structure defining budget priorities (used in payload)
export interface BudgetPriorities {
    venue: number; // Scale 1-5 (1=low, 5=high)
    food: number;
    activities: number;
    decorations: number;
    partyFavors: number;
}
// Payload sent TO the backend FOR optimizing budget
export interface OptimizeBudgetPayload {
    action: 'optimizeBudget';
    plan: BirthdayPlan; // Send the selected (potentially edited) plan
    priorities: BudgetPriorities;
    // Added: Send the specific budget context for better optimization
    numericBudget: number;
    currency: string;
}
// Response expected FROM the backend AFTER optimizing budget
export interface OptimizeBudgetResponse {
    optimizedPlan: BirthdayPlan; // Expects the single optimized plan object
}

// --- Utility Type Guard ---
// Helper function to perform a basic check if an object looks like a BirthdayPlan
// Useful after parsing data from unknown sources (like localStorage or API)
export function isValidBirthdayPlan(obj: any): obj is BirthdayPlan {
    // Basic checks - expand if more rigorous validation is needed
    return obj &&
           typeof obj.id === 'string' &&
           typeof obj.name === 'string' &&
           typeof obj.description === 'string' &&
           typeof obj.venue === 'object' && // Check if venue exists
           Array.isArray(obj.schedule) && // Check if schedule is an array
           typeof obj.catering === 'object' && // Check if catering exists
           typeof obj.guestEngagement === 'object'; // Check if guestEngagement exists
}


